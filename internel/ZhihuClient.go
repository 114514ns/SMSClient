package internel

import (
	"fmt"
	"github.com/PuerkitoBio/goquery"
	jsoniter "github.com/json-iterator/go"
	"io/ioutil"
	"net/http"
	"strings"
)

type ZhihuClient struct {
	Cookie string
}
type Rates struct {
	Base   string `json:"base currency"`
	Symbol string `json:"destination currency"`
}
type Item struct {
	Content string
	Title   string
}

func (client *ZhihuClient) GetRecommend() []*Item {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	request, _ := http.NewRequest("GET", "https://www.zhihu.com/api/v3/feed/topstory/recommend?action=down&ad_interval=-10&after_id=5&desktop=true&page_number=2", nil)
	request.Header.Set("Cookie", client.Cookie)
	h := http.Client{}
	resp, err := h.Do(request)
	var result AutoGenerated
	var slice = make([]*Item, 0)
	all, _ := ioutil.ReadAll(resp.Body)
	//println("返回内容：  " + string(all))
	json.Unmarshal(all, &result)
	if err == nil {
		for i, datum := range result.Data {
			reader, _ := goquery.NewDocumentFromReader(strings.NewReader(datum.Target.Content))
			fmt.Println(i)
			var content = reader.Text()
			var title = datum.Target.Question.Title
			var item = new(Item)
			item.Title = title
			item.Content = content
			slice = append(slice, item)
		}
	}
	return slice
}

type AutoGenerated struct {
	Data []struct {
		ID          string `json:"id"`
		Type        string `json:"type"`
		Offset      int    `json:"offset"`
		Verb        string `json:"verb"`
		CreatedTime int    `json:"created_time"`
		UpdatedTime int    `json:"updated_time"`
		Target      struct {
			ID     int64  `json:"id"`
			Type   string `json:"type"`
			URL    string `json:"url"`
			Author struct {
				ID        string `json:"id"`
				URL       string `json:"url"`
				UserType  string `json:"user_type"`
				URLToken  string `json:"url_token"`
				Name      string `json:"name"`
				Headline  string `json:"headline"`
				AvatarURL string `json:"avatar_url"`
				IsOrg     bool   `json:"is_org"`
				Gender    int    `json:"gender"`
				Badge     []struct {
					Type        string   `json:"type"`
					Description string   `json:"description"`
					TopicNames  []string `json:"topic_names,omitempty"`
					TopicIds    []int    `json:"topic_ids,omitempty"`
				} `json:"badge"`
				FollowersCount int  `json:"followers_count"`
				IsFollowing    bool `json:"is_following"`
				IsFollowed     bool `json:"is_followed"`
			} `json:"author"`
			CreatedTime  int  `json:"created_time"`
			UpdatedTime  int  `json:"updated_time"`
			VoteupCount  int  `json:"voteup_count"`
			ThanksCount  int  `json:"thanks_count"`
			CommentCount int  `json:"comment_count"`
			IsCopyable   bool `json:"is_copyable"`
			Question     struct {
				ID     int    `json:"id"`
				Type   string `json:"type"`
				URL    string `json:"url"`
				Author struct {
					ID             string `json:"id"`
					URL            string `json:"url"`
					UserType       string `json:"user_type"`
					URLToken       string `json:"url_token"`
					Name           string `json:"name"`
					Headline       string `json:"headline"`
					AvatarURL      string `json:"avatar_url"`
					IsOrg          bool   `json:"is_org"`
					Gender         int    `json:"gender"`
					FollowersCount int    `json:"followers_count"`
					IsFollowing    bool   `json:"is_following"`
					IsFollowed     bool   `json:"is_followed"`
				} `json:"author"`
				Title         string `json:"title"`
				Created       int    `json:"created"`
				AnswerCount   int    `json:"answer_count"`
				FollowerCount int    `json:"follower_count"`
				CommentCount  int    `json:"comment_count"`
				BoundTopicIds []int  `json:"bound_topic_ids"`
				IsFollowing   bool   `json:"is_following"`
				Excerpt       string `json:"excerpt"`
				Relationship  struct {
					IsAuthor bool `json:"is_author"`
				} `json:"relationship"`
				Detail       string `json:"detail"`
				QuestionType string `json:"question_type"`
			} `json:"question"`
			Excerpt            string `json:"excerpt"`
			ExcerptNew         string `json:"excerpt_new"`
			PreviewType        string `json:"preview_type"`
			PreviewText        string `json:"preview_text"`
			ReshipmentSettings string `json:"reshipment_settings"`
			Content            string `json:"content"`
			Relationship       struct {
				IsThanked bool `json:"is_thanked"`
				IsNothelp bool `json:"is_nothelp"`
				Voting    int  `json:"voting"`
			} `json:"relationship"`
			IsLabeled     bool   `json:"is_labeled"`
			VisitedCount  int    `json:"visited_count"`
			FavoriteCount int    `json:"favorite_count"`
			AnswerType    string `json:"answer_type"`
		} `json:"target"`
		Brief             string `json:"brief"`
		UninterestReasons []struct {
			ReasonID    int    `json:"reason_id"`
			ReasonType  string `json:"reason_type"`
			ObjectToken string `json:"object_token"`
			ObjectType  string `json:"object_type"`
			ReasonText  string `json:"reason_text"`
			SuccessText string `json:"success_text"`
		} `json:"uninterest_reasons,omitempty"`
		AttachedInfo string `json:"attached_info"`
		ActionCard   bool   `json:"action_card"`
	} `json:"data"`
	Paging struct {
		IsEnd    bool   `json:"is_end"`
		IsStart  bool   `json:"is_start"`
		Next     string `json:"next"`
		Previous string `json:"previous"`
		Totals   int    `json:"totals"`
	} `json:"paging"`
	FreshText string `json:"fresh_text"`
}
